-----------------------------------ВВЕДЕНИЕ В ПРЕДСТАВЛЕНИЯ(views)---------------------------------------------------------------
View - сохранённый запрос в виде объекта БД(виртуальная таблица)
-К view можно делать обычный SELECT
-View можно соединять между собой
-Производительность такая же как и у обычной таблицы
-Позволяет делать кэширование с помощью материализации
-Позволяет сокращать сложные запросы
-Позволяет подменить реальную таблицу
-Позволяет создавать виртуальные таблицы соединяющие несколько таблиц
-Позволяет скрыть логику агрегации данных при работе через ORM
-Позволяет скрыть информацию от групп пользователей
-Позволяет скрыть информацию на уровне строк от груп пользователей(строки отсекаются самим запросом)

По типу представления делятся на:
-Временные
-Рекурсивные
-Обновляемые
-Материализуемые

СИНТАКСИС СОЗДАНИЯ view:
CREATE VIEW view_name AS
SELECT select_statement

Изменение предтсавлений(view):
-Можно только добавить новые таблицы/столбцы
-Нельзя удалить существующие
-Нельзя поменять имена столбцов
-Нельзя поменять даже порядок следования столбцов
-Но мы можем переименовать сами view(представления)
-Можно удалять представления

Можем заменить view:
CREATE OR REPLACE VIEW view_name AS
SELECT select_statement

Переименовани view:
ALTER VIEW old_view_name RENAME TO new_view_name

Удаление view:
DROP VIEW [IF EXISTS] view_name

Модификация данных через представления(view):
Можем модифицировать данные через view только:
-Если во view используется только одна таблица в секции FROM
-Нет DISTINCT, GROUP BY, HAVING, UNION, INTERSECT, EXCEPT, LIMIT
-Нет оконных функций, нет агрегационных функций(MIN, MAX, SUM, COUNT, AVG)

P.S. Инфа с сайта (https://www.opennet.ru/docs/RUS/sql_kg/5-4-4.html)
5.4.4. Для чего нужны представления

Одна из основных задач, которую позволяют решать представления, - обеспечение независимости
пользовательских программ от изменения логической структуры базы данных при ее расширении и (или)
изменении размещения столбцов, возникающего, например, при расщеплении таблиц.
В последнем случае можно создать представление-соединение с именем и структурой расщепленной таблицы,
позволяющее сохранить программы, существовавшие до изменения структуры базы данных.

Кроме того, представления дают возможность различным пользователям по-разному видеть одни и те же данные,
возможно, даже в одно и то же время. Это особенно ценно при работе различных категорий пользователей с
единой интегрированной базой данных. Пользователям предоставляют только интересующие их данные в наиболее
удобной для них форме (окно в таблицу или в любое соединение любых таблиц).

Наконец, от определенных пользователей могут быть скрыты некоторые данные, невидимые через предложенное
им представление. Таким образом, принуждение пользователя осуществлять доступ к базе данных через представления
является простым, но эффективным механизмом для управления санкционированием доступа.

-----------------------------------ОБНОВЛЯЕМЫЕ ПРЕДСТАВЛЕНИЯ-------------------------------------------------------------
В view нельзя добавлять и изменять столбцы
Но можно например переименовать существующее представление и создать новое с этим именем и необходимыми столбцами
(Поправочка. Автор говорит, что нельзя добавлять столбцы в уже созданную вьюху (4:55). На самом деле новые
столбцы можно добавить только в конец существующей вьюхи, а в другие части - нельзя.)

Комментарий под уроком:
Я ПОНЯЛ ЗАЧЕМ ОНИ НУЖНЫ И КАК РАБОТАЮТ. ура..
Я не увидел это в видео (точнее оно как-то косо проходится), про одну важную черту представлений.
Изначально я думал,  что это простая статическая таблица, НО ЭТО НЕ ТАК. Как-то сама идея пришла и проверив,
я понял нафига они вообще нужны.

При уже созданной view (с фильтром), если в исходную таблицу (таблицы) добавить значения,
то они попадут и во view, если будут удовлетворены фильтру. То есть, например вы соединили 2 таблицы и создали view,
и потом добавили в те таблицы какие-то данные, то эти же данные будут во view (если подходят по условию).

А теперь где полезно? В параграфе 9 рассказывается о функциях(хранимые процедуры), как интерфейс работы с клиентом.
Так вот, чтобы в коде (клиента и SQL) не писать джоины и максимально унифицировать работу с БД через один вызов
функции и получить данные 2-х и более таблиц, в теле функции можно просто вызвать эту view.
View вернёт нужные для работы клиента данные как одну таблицу.

А если надо добавить а не вернуть данные, то просто хреначим всё во view (через функцию естесно) и
SQL сам распределит данные по изначальным отношениям (если это возможно).

По сути представление это проекция таблиц

-------------------------------------------ОПЦИЯ CHEKC-------------------------------------------------------------------------
Для того чтобы проверять корректность вставляемых данных в view:
WITH LOCAL CHECK OPTION;

Для того чтобы проверять корректность views на основе которых мы будем создавать новые view:
WITH CASCADED CHECK OPTION;
