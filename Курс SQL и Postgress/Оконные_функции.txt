---------------------------------ВВЕДЕНИЕ В ОКОННЫЕ ФУНКЦИИ---------------------------------------------------------------------
-Позволяют обрабатывать группы строк без образования группировок в результатирующем наборе
(позволяют делать group by  без group by грубо говоря)

-Делятся на:
    -Агрегатные(SUM, AVG, MIN, MAX, COUNT)
    -Ранжированные (ROW_NUMBER, RANK, LAG, LEAD)

-Отрабатывают после JOIN, WHERE, GROUP BY, HAVING, НО перед ORDER BY

СИНТАКСИС:
function OVER(expression)
Окно - некоторое выражение описывающее набор строк, которые будет обрабатывать функция, и так же
описывает порядок обработки

ПОЛНЫЙ СИНТАКСИС:
function OVER([PARTITION BY expression], [ORDER BY expression])

ПРИМЕРЫ:
SELECT category_id, category_name, product_name, unit_price, AVG(unit_price) OVER (PARTITION BY category_id) AS avg_price
FROM products
JOIN categories USING(category_id)

SELECT order_id, order_date, product_id, customer_id, unit_price as sub_total,
		SUM(unit_price) OVER(PARTITION BY order_id ORDER BY product_id) as sale_sum
FROM orders
join order_details USING(order_id)
ORDER BY order_id;


---------------------------------------------РАНЖИРОВАНИЕ------------------------------------------------------------------------
Функции Ранжирования:
-ROW_NUMBER - присвоение уникального значения строкам
-RANK - присвоение ранга(веса) строкам с пропусками
-DENSE RANK - присвоение ранга (веса) строкам без пропусков
-LAG - присвоение значения текущей строке, основанное на значении в предыдущей
-LEAD - (LAG наоборот) присвоение значения текущей строке, основанное на значении в следующей
В LEAD и LAG можно передавать смещение(offset)
-ntail - делит окно на равное кол-во групп

ПРИМЕРЫ:
RANK

SELECT product_name, unit_price,
	LAG(unit_price) OVER(ORDER BY unit_price DESC) - unit_price as price_lag
FROM products
ORDER BY unit_price DESC


DENSE_RANK

SELECT product_name, unit_price,
	DENSE_RANK() OVER(
		ORDER BY
			CASE
				WHEN unit_price > 80 THEN 1
				WHEN unit_price > 30  AND unit_price < 80 THEN 2
				ELSE 3
			END
	) as ranking
FROM products
ORDER BY unit_price DESC


LAG

SELECT product_name, unit_price,
	LAG(unit_price) OVER(ORDER BY unit_price DESC) - unit_price as price_lag
FROM products
ORDER BY unit_price DESC


LEAD

SELECT product_name, unit_price,
	LEAD(unit_price, 2) OVER(ORDER BY unit_price) - unit_price as price_lag
FROM products
ORDER BY unit_price;


ntile
SELECT pi.product_id,
       sum (pi.count) AS count_total,
       ntile(3) over (ORDER BY sum(pi.count) desc)
  FROM purchase_item pi
 GROUP BY pi.product_id

--------------------------------------------ВОЗВРАТ N-записей-------------------------------------------------------------------
SELECT *
FROM products
WHERE product_id = ANY (
	SELECT product_id
	FROM(
	    SELECT product_id, unit_price,
		    ROW_NUMBER() OVER(ORDER BY unit_price DESC) as nth
	    FROM products) sorted_prices
	WHERE nth < 4
	)
