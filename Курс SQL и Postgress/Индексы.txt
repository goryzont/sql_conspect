--------------------------------------ВВЕДЕНИЕ В ИНДЕКСЫ------------------------------------------------------------------------------
Индекс - это структура данных, ускоряющая выборку данных из таблицы за счёт
доп. операций записи и пространства на диске, используемых для хранения
структуры данных и поддержания её в актуальном состоянии.

Устройство БД:
-database_cluster - одна или более БД, управляемые из под одной инстанции сервера
-Файлы данных кластера лежат в директории data(В Postgrese это PGDATA)
-Для каждой БД там есть своя подпапка в data/base
-Для каждой таблицы и индекса выделяется отдельный файл (Файлы разбиваются по сегментам в 1ГБ)
-Таблица состоит из массива страниц(блоков, размером 8кБ)
-Файл таблицы называется Heap File - содержат списки неупорядоченных записей различной длины

-Рядом с файлом таблицы лежит файл FSM(free space map)
-FSM не обновляется при каждом обновлении или удалении строки
-VACUUM - команда для очистки "дохлых" версий строк
-Рядом с файлом таблицы лежит файл VM(visability map)
    VACUUM:
    -Если вообще не обслуживать БД, то фрагментация данных будет возрастать
    -VACUUM - команда для очистки "дохлых" версий строк
    -VACUUM[FULL] - полный "компактинг" таблицы
    -Необходим переодический запуск VACUUM
    -Активно обновляемым БД рекомендуется проходить VACUUM каждую ночь
    -VACUUM FULL только если удалили много данных
    -VACUUM ANALYZE - комбинация двух операций
    -Autovacuum демон делает всё автоматически

Устройство Таблиц:
-Таблица размером 1ГБ
-Состоят из страниц по 8кБ
-Каждая из которых содержит заголовок страницы и строки с их заголовками
-Страница содержит ссылки на строки(CTID - состоит из пары номер-значений: номер страницы и индекса)

------------------------------------МЕТОДЫ СКАНИРОВАНИЯ-----------------------------------------------------------------------
Индекс - это объект БД который можно создавать и удалять

-Индекс позволяет искать значения БД без полного перебора
-Оптимизация выборки "небольшого" числа записей
-"Небольшое" число - число относительно кол-ва записей
-По PRIMARY KEY и UNIQUE столбцам индекс создаётся автоматически
-Индексы требуют затрат

Команда для просмотра типов индексов доступных на сервере
select amname from pg_am;

Основные типы индексов:
-B-tree(Сбалансированное дерево)
-Хэш-индекс
-GIST(обобщённое дерево поиска)
-GIN(обобщённый обратный)
-SP-GIST(GIST с двоичным разбиением пространства)
-BRIN(блочно-диапозонный)

Методы сканирования:
--Индексное сканирование(index scan) - При индексном сканировании метод доступа возвращает
дентификаторы версий строк по одному за раз. Механизм индексирования получает очередной идентификатор,
обращается к табличной странице, на которую он указывает, получает версию строки и, если она удовлетворяет
правилам видимости, возвращает необходимый набор полей.

--Исключительно индексное сканирование(index_only_scan) - некоторые индексы хранят вместе и индентификаторами строк
проиндексированные значения, и это позволяет читать сам индекс без обращения к таблицам и забирать
результат прямо из индекса(Работает если все данные актуальные)

--Сканирование по битовой карте(bitmap scan) - Чтобы не тратить ресурсы на повторный просмотр табличных страниц,
применяется еще один способ доступа — сканирование по битовой карте.
Он похож на обычный индексный доступ, но происходит в дваэтапа.

Сначала сканируется индекс (Bitmap Index Scan) и в локальной памяти процесса строится битовая карта.
В этой карте отмечаются те строки, которые должны быть прочитаны

Когда индекс просканирован и битовая карта готова, начинается
сканирование таблицы (Bitmap Heap Scan). При этом:
- страницы читаются последовательно (увеличивается шанс
воспользоваться кэшем ОС);
- каждая страница просматривается ровно один раз.

--Последовательное сканирование(sequential scan):
-Последовательное чтение всех страниц
-страницы читаются в кэш (используется буферное кольцо)
-проверяется видимость версий строк
-данные возвращаются в произвольном порядке
-время сканирования зависит от физического размера файла

Последовательное чтение файла позволяет использовать тот факт, что
операционная система обычно читает данные порциями больше, чем
размер страницы: с большой вероятностью несколько следующих
страниц уже окажутся в кэше ОС.

Последовательное сканирование эффективно работает, когда надо
прочитать всю таблицу или значительную ее часть (если селективность
условия низка). Если же из всей таблицы нужна только небольшая
часть записей, более предпочтительными являются методы доступа,
использующие индекс.

-----------------------------------------ВИДЫ ИНДЕКСОВ------------------------------------------------------------------------
Команда для просмотра типов индексов доступных на сервере
select amname from pg_am;

Основные типы индексов:
-B-tree(Сбалансированное дерево)
-Хэш-индекс
-GIST(обобщённое дерево поиска)
-GIN(обобщённый обратный)
-SP-GIST(GIST с двоичным разбиением пространства)
-BRIN(блочно-диапозонный)

B-tree(Сбалансированное дерево):
-Создаётся по умолчанию (CREATE INDEX index_name ON table_name(column_name))
-Поддерживает операторы: <,>,>=,<=,=
-Поддерживает LIKE 'abc%'(но не '%abc')
-Индексирует NULL
-Сложность поиска O(logN)

Хэш-индекс:
-CREATE INDEX index_name ON table_name USING HASH(column_name)
-Поддерживает только оператор =
-Не отражается в журнале предзаписи(WAL - изменение в файлах с данными должны записывать только, после того
как были занесены в журнал)(это недостаток, потому что придётся делать reindex, в общем и целом этот индекс
не рекомендуется к применению)
-Сложность поиска O(1)

Далее идут специализированные индексы(ещё реже применяют):
GIST - применяется для индексации геометрических типов данных и текстовых для организации
полнотекстного поиска, занимает меньше места чем GIN, однако может быть менее эффективен за счёт
дополнительных проверок

GIN(generalyze inverted index) - обычно применяется для индексации массива или набора значений.
Можно использовать для организации полнотекстного поиска

SP-GIST - используется для набора данных которые подразумивают естественную упорядоченность,
но не являются сбалансированными. В качестве примера можно привести телефонные номера которые
кластеризуются по странам и городам, а часть номера более менее случайна
(Лучше строить такие индексы специалистам в математическом анализе и теорие вероятности)

BRIN - полезен на больших объёмах данных которые подразумивают естественную упорядоченность,
например почтовый индекс или тайм штампы

-------------------------------------EXPLAIN, ANALYZE------------------------------------------------------------------------
Для грамотной работы с индексом на нужен аналитический инструмент, с помощью которого
мы можем анализировать ситуацию и думать какие индексы строить и какие запросы писать

И стандартный путь решения это проблемы это команда EXPLAIN
СИНТАКСИС:
EXPLAIN query (позволяет посмотреть на план выполнения запроса)
(Запрос на самом деле не выполняется, а посылается планировщку, поэтому не придётся ждать долго выполнения запроса)

EXPLAIN ANALYZE query прогоняет запрос, показывает план и реальность

ANALYZE:
-Собирает статистику по данным таблицы
-Планировщик смотрит на статистику при построение плана
-ANALYZE[table_name[(colum1, colum2,...)]]
-Запускать как минимум 1 раз в день
-Если включен Autovacuum, то он также запускает ANALYZE

----------------------------ПОСТРОЕНИЕ ПРОСТОГО ИНДЕКСА ПО ДВУМ КОЛОНКАМ-----------------------------------------------------
Пример создания индекса:
CREATE  INDEX idx_perf_test_id ON perf_test(id)

Пример создания индекса по двум колонкам:
CREATE INDEX idx_perf_test_reason_annotation ON perf_test(reason, annotation)
При этом на у нас также будет получать индексный поиск по первой указзаной таблице

------------------------------------ИНДЕКСЫ ПО ВЫРАЖЕНИЯМ---------------------------------------------------------------
CREATE INDEX idx_perf_test_annotation_lower ON perf_test(LOWER(annotation))

Вот таким образом мы строим индекс по выражениям

Потому что по выражениям индекс не работает

------------------------------"СЛОЖНЫЙ" ИНДЕКС ДЛЯ ПОИСКА ПО ТЕКСТУ----------------------------------------------------------
Будем строить индекс GIN

МЫ установили вот такое расшерешние: pg_tgrm

И построили вот такой индекс

CREATE EXTENSION pg_trgm;

CREATE INDEX tgrm_index_perf_index_reason ON perf_test USING gin(reason gin_trgm_ops);

Если выборка небольшая, то скорость может достигать индексированной
